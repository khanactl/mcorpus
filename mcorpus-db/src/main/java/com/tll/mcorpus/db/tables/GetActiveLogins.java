/*
 * This file is generated by jOOQ.
 */
package com.tll.mcorpus.db.tables;


import com.tll.jooqbind.PostgresInetAddressBinding;
import com.tll.mcorpus.db.Public;
import com.tll.mcorpus.db.tables.records.GetActiveLoginsRecord;

import java.net.InetAddress;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetActiveLogins extends TableImpl<GetActiveLoginsRecord> {

    private static final long serialVersionUID = 982442204;

    /**
     * The reference instance of <code>public.get_active_logins</code>
     */
    public static final GetActiveLogins GET_ACTIVE_LOGINS = new GetActiveLogins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetActiveLoginsRecord> getRecordType() {
        return GetActiveLoginsRecord.class;
    }

    /**
     * The column <code>public.get_active_logins.jwt_id</code>.
     */
    public final TableField<GetActiveLoginsRecord, UUID> JWT_ID = createField(DSL.name("jwt_id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.get_active_logins.login_expiration</code>.
     */
    public final TableField<GetActiveLoginsRecord, OffsetDateTime> LOGIN_EXPIRATION = createField(DSL.name("login_expiration"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.get_active_logins.request_timestamp</code>.
     */
    public final TableField<GetActiveLoginsRecord, OffsetDateTime> REQUEST_TIMESTAMP = createField(DSL.name("request_timestamp"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.get_active_logins.request_origin</code>.
     */
    public final TableField<GetActiveLoginsRecord, InetAddress> REQUEST_ORIGIN = createField(DSL.name("request_origin"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\""), this, "", new PostgresInetAddressBinding());

    /**
     * Create a <code>public.get_active_logins</code> table reference
     */
    public GetActiveLogins() {
        this(DSL.name("get_active_logins"), null);
    }

    /**
     * Create an aliased <code>public.get_active_logins</code> table reference
     */
    public GetActiveLogins(String alias) {
        this(DSL.name(alias), GET_ACTIVE_LOGINS);
    }

    /**
     * Create an aliased <code>public.get_active_logins</code> table reference
     */
    public GetActiveLogins(Name alias) {
        this(alias, GET_ACTIVE_LOGINS);
    }

    private GetActiveLogins(Name alias, Table<GetActiveLoginsRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private GetActiveLogins(Name alias, Table<GetActiveLoginsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public <O extends Record> GetActiveLogins(Table<O> child, ForeignKey<O, GetActiveLoginsRecord> key) {
        super(child, key, GET_ACTIVE_LOGINS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public GetActiveLogins as(String alias) {
        return new GetActiveLogins(DSL.name(alias), this, parameters);
    }

    @Override
    public GetActiveLogins as(Name alias) {
        return new GetActiveLogins(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetActiveLogins rename(String name) {
        return new GetActiveLogins(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetActiveLogins rename(Name name) {
        return new GetActiveLogins(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, OffsetDateTime, OffsetDateTime, InetAddress> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetActiveLogins call(UUID mcuserId) {
        return new GetActiveLogins(DSL.name(getName()), null, new Field[] { 
              DSL.val(mcuserId, org.jooq.impl.SQLDataType.UUID)
        });
    }

    /**
     * Call this table-valued function
     */
    public GetActiveLogins call(Field<UUID> mcuserId) {
        return new GetActiveLogins(DSL.name(getName()), null, new Field[] { 
              mcuserId
        });
    }
}
