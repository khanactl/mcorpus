/*
 * This file is generated by jOOQ.
 */
package com.tll.mcorpus.db.tables;


import com.tll.jooqbind.PostgresInetAddressBinding;
import com.tll.mcorpus.db.Indexes;
import com.tll.mcorpus.db.Keys;
import com.tll.mcorpus.db.Public;
import com.tll.mcorpus.db.enums.JwtIdStatus;
import com.tll.mcorpus.db.enums.McuserAuditType;
import com.tll.mcorpus.db.tables.records.McuserAuditRecord;

import java.net.InetAddress;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class McuserAudit extends TableImpl<McuserAuditRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.mcuser_audit</code>
     */
    public static final McuserAudit MCUSER_AUDIT = new McuserAudit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<McuserAuditRecord> getRecordType() {
        return McuserAuditRecord.class;
    }

    /**
     * The column <code>public.mcuser_audit.uid</code>.
     */
    public final TableField<McuserAuditRecord, UUID> UID = createField(DSL.name("uid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.mcuser_audit.created</code>.
     */
    public final TableField<McuserAuditRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.mcuser_audit.type</code>.
     */
    public final TableField<McuserAuditRecord, McuserAuditType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.tll.mcorpus.db.enums.McuserAuditType.class), this, "");

    /**
     * The column <code>public.mcuser_audit.request_timestamp</code>.
     */
    public final TableField<McuserAuditRecord, OffsetDateTime> REQUEST_TIMESTAMP = createField(DSL.name("request_timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.mcuser_audit.request_origin</code>.
     */
    public final TableField<McuserAuditRecord, InetAddress> REQUEST_ORIGIN = createField(DSL.name("request_origin"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\"").nullable(false), this, "", new PostgresInetAddressBinding());

    /**
     * The column <code>public.mcuser_audit.login_expiration</code>.
     */
    public final TableField<McuserAuditRecord, OffsetDateTime> LOGIN_EXPIRATION = createField(DSL.name("login_expiration"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.mcuser_audit.jwt_id</code>.
     */
    public final TableField<McuserAuditRecord, UUID> JWT_ID = createField(DSL.name("jwt_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.mcuser_audit.jwt_id_status</code>.
     */
    public final TableField<McuserAuditRecord, JwtIdStatus> JWT_ID_STATUS = createField(DSL.name("jwt_id_status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.tll.mcorpus.db.enums.JwtIdStatus.class), this, "");

    private McuserAudit(Name alias, Table<McuserAuditRecord> aliased) {
        this(alias, aliased, null);
    }

    private McuserAudit(Name alias, Table<McuserAuditRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.mcuser_audit</code> table reference
     */
    public McuserAudit(String alias) {
        this(DSL.name(alias), MCUSER_AUDIT);
    }

    /**
     * Create an aliased <code>public.mcuser_audit</code> table reference
     */
    public McuserAudit(Name alias) {
        this(alias, MCUSER_AUDIT);
    }

    /**
     * Create a <code>public.mcuser_audit</code> table reference
     */
    public McuserAudit() {
        this(DSL.name("mcuser_audit"), null);
    }

    public <O extends Record> McuserAudit(Table<O> child, ForeignKey<O, McuserAuditRecord> key) {
        super(child, key, MCUSER_AUDIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MCUSER_AUDIT__JWT_ID);
    }

    @Override
    public UniqueKey<McuserAuditRecord> getPrimaryKey() {
        return Keys.MCUSER_AUDIT_PKEY;
    }

    @Override
    public List<ForeignKey<McuserAuditRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MCUSER_AUDIT__MCUSER_AUDIT_UID_FKEY);
    }

    private transient Mcuser _mcuser;

    /**
     * Get the implicit join path to the <code>public.mcuser</code> table.
     */
    public Mcuser mcuser() {
        if (_mcuser == null)
            _mcuser = new Mcuser(this, Keys.MCUSER_AUDIT__MCUSER_AUDIT_UID_FKEY);

        return _mcuser;
    }

    @Override
    public McuserAudit as(String alias) {
        return new McuserAudit(DSL.name(alias), this);
    }

    @Override
    public McuserAudit as(Name alias) {
        return new McuserAudit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public McuserAudit rename(String name) {
        return new McuserAudit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public McuserAudit rename(Name name) {
        return new McuserAudit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, OffsetDateTime, McuserAuditType, OffsetDateTime, InetAddress, OffsetDateTime, UUID, JwtIdStatus> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
