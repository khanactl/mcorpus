/*
 * This file is generated by jOOQ.
 */
package com.tll.mcorpus.db.tables;


import com.tll.mcorpus.db.Indexes;
import com.tll.mcorpus.db.Keys;
import com.tll.mcorpus.db.Public;
import com.tll.mcorpus.db.enums.Addressname;
import com.tll.mcorpus.db.tables.records.MaddressRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maddress extends TableImpl<MaddressRecord> {

    private static final long serialVersionUID = 1527520813;

    /**
     * The reference instance of <code>public.maddress</code>
     */
    public static final Maddress MADDRESS = new Maddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MaddressRecord> getRecordType() {
        return MaddressRecord.class;
    }

    /**
     * The column <code>public.maddress.mid</code>.
     */
    public final TableField<MaddressRecord, UUID> MID = createField(DSL.name("mid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.maddress.address_name</code>.
     */
    public final TableField<MaddressRecord, Addressname> ADDRESS_NAME = createField(DSL.name("address_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.tll.mcorpus.db.enums.Addressname.class), this, "");

    /**
     * The column <code>public.maddress.modified</code>.
     */
    public final TableField<MaddressRecord, OffsetDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.maddress.attn</code>.
     */
    public final TableField<MaddressRecord, String> ATTN = createField(DSL.name("attn"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.maddress.street1</code>.
     */
    public final TableField<MaddressRecord, String> STREET1 = createField(DSL.name("street1"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.maddress.street2</code>.
     */
    public final TableField<MaddressRecord, String> STREET2 = createField(DSL.name("street2"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.maddress.city</code>.
     */
    public final TableField<MaddressRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.maddress.state</code>.
     */
    public final TableField<MaddressRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.CHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.maddress.postal_code</code>.
     */
    public final TableField<MaddressRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.maddress.country</code>.
     */
    public final TableField<MaddressRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'USA'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>public.maddress</code> table reference
     */
    public Maddress() {
        this(DSL.name("maddress"), null);
    }

    /**
     * Create an aliased <code>public.maddress</code> table reference
     */
    public Maddress(String alias) {
        this(DSL.name(alias), MADDRESS);
    }

    /**
     * Create an aliased <code>public.maddress</code> table reference
     */
    public Maddress(Name alias) {
        this(alias, MADDRESS);
    }

    private Maddress(Name alias, Table<MaddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Maddress(Name alias, Table<MaddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Maddress(Table<O> child, ForeignKey<O, MaddressRecord> key) {
        super(child, key, MADDRESS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MADDRESS_PKEY);
    }

    @Override
    public UniqueKey<MaddressRecord> getPrimaryKey() {
        return Keys.MADDRESS_PKEY;
    }

    @Override
    public List<UniqueKey<MaddressRecord>> getKeys() {
        return Arrays.<UniqueKey<MaddressRecord>>asList(Keys.MADDRESS_PKEY);
    }

    @Override
    public List<ForeignKey<MaddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MaddressRecord, ?>>asList(Keys.MADDRESS__MADDRESS_MID_FKEY);
    }

    public Member member() {
        return new Member(this, Keys.MADDRESS__MADDRESS_MID_FKEY);
    }

    @Override
    public Maddress as(String alias) {
        return new Maddress(DSL.name(alias), this);
    }

    @Override
    public Maddress as(Name alias) {
        return new Maddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maddress rename(String name) {
        return new Maddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maddress rename(Name name) {
        return new Maddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, Addressname, OffsetDateTime, String, String, String, String, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
