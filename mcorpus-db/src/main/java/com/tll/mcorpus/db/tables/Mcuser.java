/*
 * This file is generated by jOOQ.
 */
package com.tll.mcorpus.db.tables;


import com.tll.mcorpus.db.Keys;
import com.tll.mcorpus.db.Public;
import com.tll.mcorpus.db.enums.McuserRole;
import com.tll.mcorpus.db.enums.McuserStatus;
import com.tll.mcorpus.db.tables.records.McuserRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mcuser extends TableImpl<McuserRecord> {

    private static final long serialVersionUID = -1607874137;

    /**
     * The reference instance of <code>public.mcuser</code>
     */
    public static final Mcuser MCUSER = new Mcuser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<McuserRecord> getRecordType() {
        return McuserRecord.class;
    }

    /**
     * The column <code>public.mcuser.uid</code>.
     */
    public final TableField<McuserRecord, UUID> UID = createField(DSL.name("uid"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("public.gen_random_uuid()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.mcuser.created</code>.
     */
    public final TableField<McuserRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.mcuser.modified</code>.
     */
    public final TableField<McuserRecord, OffsetDateTime> MODIFIED = createField(DSL.name("modified"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.mcuser.name</code>.
     */
    public final TableField<McuserRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.mcuser.email</code>.
     */
    public final TableField<McuserRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.mcuser.username</code>.
     */
    public final TableField<McuserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.mcuser.pswd</code>.
     */
    public final TableField<McuserRecord, String> PSWD = createField(DSL.name("pswd"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.mcuser.status</code>.
     */
    public final TableField<McuserRecord, McuserStatus> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'ACTIVE'::mcuser_status", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.tll.mcorpus.db.enums.McuserStatus.class), this, "");

    /**
     * The column <code>public.mcuser.roles</code>.
     */
    public final TableField<McuserRecord, McuserRole[]> ROLES = createField(DSL.name("roles"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.tll.mcorpus.db.enums.McuserRole.class).getArrayDataType(), this, "");

    /**
     * Create a <code>public.mcuser</code> table reference
     */
    public Mcuser() {
        this(DSL.name("mcuser"), null);
    }

    /**
     * Create an aliased <code>public.mcuser</code> table reference
     */
    public Mcuser(String alias) {
        this(DSL.name(alias), MCUSER);
    }

    /**
     * Create an aliased <code>public.mcuser</code> table reference
     */
    public Mcuser(Name alias) {
        this(alias, MCUSER);
    }

    private Mcuser(Name alias, Table<McuserRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mcuser(Name alias, Table<McuserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Mcuser(Table<O> child, ForeignKey<O, McuserRecord> key) {
        super(child, key, MCUSER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<McuserRecord> getPrimaryKey() {
        return Keys.MCUSER_PKEY;
    }

    @Override
    public List<UniqueKey<McuserRecord>> getKeys() {
        return Arrays.<UniqueKey<McuserRecord>>asList(Keys.MCUSER_PKEY, Keys.MCUSER_USERNAME_KEY);
    }

    @Override
    public Mcuser as(String alias) {
        return new Mcuser(DSL.name(alias), this);
    }

    @Override
    public Mcuser as(Name alias) {
        return new Mcuser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mcuser rename(String name) {
        return new Mcuser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mcuser rename(Name name) {
        return new Mcuser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, OffsetDateTime, OffsetDateTime, String, String, String, String, McuserStatus, McuserRole[]> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
